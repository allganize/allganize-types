from _typeshed import Incomplete
from collections.abc import Generator

class switch_db:
    cls: Incomplete
    collection: Incomplete
    db_alias: Incomplete
    ori_db_alias: Incomplete
    def __init__(self, cls, db_alias) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback) -> None: ...

class switch_collection:
    cls: Incomplete
    ori_collection: Incomplete
    ori_get_collection_name: Incomplete
    collection_name: Incomplete
    def __init__(self, cls, collection_name) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback) -> None: ...

class no_dereference:
    cls: Incomplete
    deref_fields: Incomplete
    def __init__(self, cls) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback): ...

class no_sub_classes:
    cls: Incomplete
    def __init__(self, cls) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback): ...

class query_counter:
    counter: int
    db: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t, value, traceback) -> None: ...
    def __eq__(self, value): ...
    def __ne__(self, value): ...
    def __lt__(self, value): ...
    def __le__(self, value): ...
    def __gt__(self, value): ...
    def __ge__(self, value): ...
    def __int__(self): ...

def set_write_concern(collection, write_concerns) -> Generator[Incomplete, None, None]: ...

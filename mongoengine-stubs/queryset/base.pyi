"""
This type stub file was generated by pyright.
"""

from _typeshed import Incomplete
from collections.abc import Generator

DO_NOTHING: int
NULLIFY: int
CASCADE: int
DENY: int
PULL: int
class BaseQuerySet:
    only_fields: Incomplete
    def __init__(self, document, collection) -> None:
        ...
    
    def __call__(self, q_obj: Incomplete | None = ..., class_check: bool = ..., read_preference: Incomplete | None = ..., **query):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __iter__(self):
        ...
    
    def __bool__(self):
        ...
    
    def __bool__(self):
        ...
    
    def all(self):
        ...
    
    def filter(self, *q_objs, **query):
        ...
    
    def search_text(self, text, language: Incomplete | None = ...):
        ...
    
    def get(self, *q_objs, **query):
        ...
    
    def create(self, **kwargs):
        ...
    
    def first(self):
        ...
    
    def insert(self, doc_or_docs, load_bulk: bool = ..., write_concern: Incomplete | None = ..., signal_kwargs: Incomplete | None = ...):
        ...
    
    def count(self, with_limit_and_skip: bool = ...):
        ...
    
    def delete(self, write_concern: Incomplete | None = ..., _from_doc_delete: bool = ..., cascade_refs: Incomplete | None = ...):
        ...
    
    def update(self, upsert: bool = ..., multi: bool = ..., write_concern: Incomplete | None = ..., full_result: bool = ..., **update):
        ...
    
    def upsert_one(self, write_concern: Incomplete | None = ..., **update):
        ...
    
    def update_one(self, upsert: bool = ..., write_concern: Incomplete | None = ..., **update):
        ...
    
    def modify(self, upsert: bool = ..., full_response: bool = ..., remove: bool = ..., new: bool = ..., **update):
        ...
    
    def with_id(self, object_id):
        ...
    
    def in_bulk(self, object_ids):
        ...
    
    def none(self):
        ...
    
    def no_sub_classes(self):
        ...
    
    def using(self, alias):
        ...
    
    def clone(self):
        ...
    
    def select_related(self, max_depth: int = ...):
        ...
    
    def limit(self, n):
        ...
    
    def skip(self, n):
        ...
    
    def hint(self, index: Incomplete | None = ...):
        ...
    
    def batch_size(self, size):
        ...
    
    def distinct(self, field):
        ...
    
    def only(self, *fields):
        ...
    
    def exclude(self, *fields):
        ...
    
    def fields(self, _only_called: bool = ..., **kwargs):
        ...
    
    def all_fields(self):
        ...
    
    def order_by(self, *keys):
        ...
    
    def comment(self, text):
        ...
    
    def explain(self, format: bool = ...):
        ...
    
    def snapshot(self, enabled):
        ...
    
    def timeout(self, enabled):
        ...
    
    def slave_okay(self, enabled):
        ...
    
    def read_preference(self, read_preference):
        ...
    
    def scalar(self, *fields):
        ...
    
    def values_list(self, *fields):
        ...
    
    def as_pymongo(self):
        ...
    
    def max_time_ms(self, ms):
        ...
    
    def to_json(self, *args, **kwargs):
        ...
    
    def from_json(self, json_data):
        ...
    
    def aggregate(self, *pipeline, **kwargs):
        ...
    
    def map_reduce(self, map_f, reduce_f, output, finalize_f: Incomplete | None = ..., limit: Incomplete | None = ..., scope: Incomplete | None = ...) -> Generator[Incomplete, None, None]:
        ...
    
    def exec_js(self, code, *fields, **options):
        ...
    
    def where(self, where_clause):
        ...
    
    def sum(self, field):
        ...
    
    def average(self, field):
        ...
    
    def item_frequencies(self, field, normalize: bool = ..., map_reduce: bool = ...):
        ...
    
    def __next__(self):
        ...
    
    def rewind(self) -> None:
        ...
    
    def __deepcopy__(self, memo):
        ...
    
    def no_dereference(self):
        ...
    
    def ensure_index(self, **kwargs):
        ...
    


